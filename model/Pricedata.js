const mongoose = require("mongoose");
import { getbySymbol } from "../model/SecurityMaster";

const PriceDataSchema = new mongoose.Schema({
  securityMaster_id: {
    type: mongoose.Schema.ObjectId,
    ref: "SecurityMaster",
  },
  language: String,
  region: String,
  quoteType: String,
  typeDisp: String,
  quoteSourceName: String,
  triggerable: Boolean,
  customPriceAlertConfidence: String,
  currency: String,
  marketState: String,
  exchange: String,
  shortName: String,
  longName: String,
  messageBoardId: String,
  exchangeTimezoneName: String,
  exchangeTimezoneShortName: String,
  gmtOffSetMilliseconds: Number,
  market: String,
  esgPopulated: Boolean,
  regularMarketChangePercent: Number,
  regularMarketPrice: Number,
  sharesOutstanding: Number,
  bookValue: Number,
  fiftyDayAverage: Number,
  fiftyDayAverageChange: Number,
  fiftyDayAverageChangePercent: Number,
  twoHundredDayAverage: Number,
  twoHundredDayAverageChange: Number,
  twoHundredDayAverageChangePercent: Number,
  marketCap: Number,
  forwardPE: Number,
  priceToBook: Number,
  sourceInterval: Number,
  exchangeDataDelayedBy: Number,
  averageAnalystRating: String,
  tradeable: Boolean,
  cryptoTradeable: Boolean,
  priceHint: Number,
  regularMarketChange: Number,
  regularMarketTime: Date,
  regularMarketDayHigh: Number,
  regularMarketDayRange: {
    low: Number,
    high: Number,
  },
  regularMarketDayLow: Number,
  regularMarketVolume: Number,
  regularMarketPreviousClose: Number,
  bid: Number,
  ask: Number,
  bidSize: Number,
  askSize: Number,
  fullExchangeName: String,
  financialCurrency: String,
  regularMarketOpen: Number,
  averageDailyVolume3Month: Number,
  averageDailyVolume10Day: Number,
  fiftyTwoWeekLowChange: Number,
  fiftyTwoWeekLowChangePercent: Number,
  fiftyTwoWeekRange: {
    low: Number,
    high: Number,
  },
  fiftyTwoWeekHighChange: Number,
  fiftyTwoWeekHighChangePercent: Number,
  fiftyTwoWeekLow: Number,
  fiftyTwoWeekHigh: Number,
  fiftyTwoWeekChangePercent: Number,
  earningsTimestamp: Date,
  earningsTimestampStart: Date,
  earningsTimestampEnd: Date,
  isEarningsDateEstimate: Boolean,
  trailingAnnualDividendRate: Number,
  trailingPE: Number,
  dividendRate: Number,
  trailingAnnualDividendYield: Number,
  dividendYield: Number,
  epsTrailingTwelveMonths: Number,
  epsForward: Number,
  hasPrePostMarketData: Boolean,
  firstTradeDateMilliseconds: Date,
  symbol: String,
  lastUpdated: { type: Date, default: Date.now },
});

const PriceData = mongoose.model("PriceData", PriceDataSchema);

// Insert or update price data
async function updateprice(Obj) {
  try {
    const securitydata = await getbySymbol(Obj.symbol);
    const security_id = securitydata._id;

    const updatedPriceData = await PriceData.findOneAndUpdate(
      { securityMaster_id: security_id },
      {
        language: Obj.language,
        region: Obj.region,
        quoteType: Obj.quoteType,
        typeDisp: Obj.typeDisp,
        quoteSourceName: Obj.quoteSourceName,
        triggerable: Obj.triggerable,
        customPriceAlertConfidence: Obj.customPriceAlertConfidence,
        currency: Obj.currency,
        marketState: Obj.marketState,
        exchange: Obj.exchange,
        shortName: Obj.shortName,
        longName: Obj.longName,
        messageBoardId: Obj.messageBoardId,
        exchangeTimezoneName: Obj.exchangeTimezoneName,
        exchangeTimezoneShortName: Obj.exchangeTimezoneShortName,
        gmtOffSetMilliseconds: Obj.gmtOffSetMilliseconds,
        market: Obj.market,
        esgPopulated: Obj.esgPopulated,
        regularMarketChangePercent: Obj.regularMarketChangePercent,
        regularMarketPrice: Obj.regularMarketPrice,
        sharesOutstanding: Obj.sharesOutstanding,
        bookValue: Obj.bookValue,
        fiftyDayAverage: Obj.fiftyDayAverage,
        fiftyDayAverageChange: Obj.fiftyDayAverageChange,
        fiftyDayAverageChangePercent: Obj.fiftyDayAverageChangePercent,
        twoHundredDayAverage: Obj.twoHundredDayAverage,
        twoHundredDayAverageChange: Obj.twoHundredDayAverageChange,
        twoHundredDayAverageChangePercent:
          Obj.twoHundredDayAverageChangePercent,
        marketCap: Obj.marketCap,
        forwardPE: Obj.forwardPE,
        priceToBook: Obj.priceToBook,
        sourceInterval: Obj.sourceInterval,
        exchangeDataDelayedBy: Obj.exchangeDataDelayedBy,
        averageAnalystRating: Obj.averageAnalystRating,
        tradeable: Obj.tradeable,
        cryptoTradeable: Obj.cryptoTradeable,
        priceHint: Obj.priceHint,
        regularMarketChange: Obj.regularMarketChange,
        regularMarketTime: Obj.regularMarketTime,
        regularMarketDayHigh: Obj.regularMarketDayHigh,
        regularMarketDayRange: Obj.regularMarketDayRange,
        regularMarketDayLow: Obj.regularMarketDayLow,
        regularMarketVolume: Obj.regularMarketVolume,
        regularMarketPreviousClose: Obj.regularMarketPreviousClose,
        bid: Obj.bid,
        ask: Obj.ask,
        bidSize: Obj.bidSize,
        askSize: Obj.askSize,
        fullExchangeName: Obj.fullExchangeName,
        financialCurrency: Obj.financialCurrency,
        regularMarketOpen: Obj.regularMarketOpen,
        averageDailyVolume3Month: Obj.averageDailyVolume3Month,
        averageDailyVolume10Day: Obj.averageDailyVolume10Day,
        fiftyTwoWeekLowChange: Obj.fiftyTwoWeekLowChange,
        fiftyTwoWeekLowChangePercent: Obj.fiftyTwoWeekLowChangePercent,
        fiftyTwoWeekRange: Obj.fiftyTwoWeekRange,
        fiftyTwoWeekHighChange: Obj.fiftyTwoWeekHighChange,
        fiftyTwoWeekHighChangePercent: Obj.fiftyTwoWeekHighChangePercent,
        fiftyTwoWeekLow: Obj.fiftyTwoWeekLow,
        fiftyTwoWeekHigh: Obj.fiftyTwoWeekHigh,
        fiftyTwoWeekChangePercent: Obj.fiftyTwoWeekChangePercent,
        earningsTimestamp: Obj.earningsTimestamp,
        earningsTimestampStart: Obj.earningsTimestampStart,
        earningsTimestampEnd: Obj.earningsTimestampEnd,
        earningsCallTimestampStart: Obj.earningsCallTimestampStart,
        earningsCallTimestampEnd: Obj.earningsCallTimestampEnd,
        isEarningsDateEstimate: Obj.isEarningsDateEstimate,
        trailingAnnualDividendRate: Obj.trailingAnnualDividendRate,
        trailingPE: Obj.trailingPE,
        dividendRate: Obj.dividendRate,
        trailingAnnualDividendYield: Obj.trailingAnnualDividendYield,
        dividendYield: Obj.dividendYield,
        epsTrailingTwelveMonths: Obj.epsTrailingTwelveMonths,
        epsForward: Obj.epsForward,
        hasPrePostMarketData: Obj.hasPrePostMarketData,
        firstTradeDateMilliseconds: Obj.firstTradeDateMilliseconds,
      },
      { new: true, upsert: true }
    );

    return updatedPriceData;
  } catch (err) {
    console.error(err);
    res.status(500).send("Server error");
  }
}

export { PriceData, updateprice };
